
<script src="https://www.gstatic.com/firebasejs/5.0.3/firebase.js"></script>
<script>
  // Initialize Firebase
  var config = {
    apiKey: "AIzaSyB0PQfBjjSoYbjQz_JSOwXU0YvAu057F5Q",
    authDomain: "kibibit-post-comments.firebaseapp.com", // {{site.fbc-comments-firebase}}
    databaseURL: "https://kibibit-post-comments.firebaseio.com",
    projectId: "kibibit-post-comments",
    storageBucket: "kibibit-post-comments.appspot.com",
    messagingSenderId: "585085512877"
  };
  firebase.initializeApp(config);
</script>
<script>
const googleProvider = new firebase.auth.GoogleAuthProvider();
const facebookProvider = new firebase.auth.FacebookAuthProvider();
const twitterProvider = new firebase.auth.TwitterAuthProvider();
const githubProvider = new firebase.auth.GithubAuthProvider();

$(document).ready(function () {
  const postId = '{{page.id || default}}';
  const blogName = '{{site.name || default}}';
  const database = firebase.database();
  const fbPostComments = database.ref('posts/' + postId);
  const fbPostCommentCount = database.ref('comment-counts/' + postId);
  const fbUsers = database.ref('users');

  let currentUser = null;
  let onLogin = null;

  firebase.auth().onAuthStateChanged(function(user) {
    if (user) {
      // currentUser.picture = user.thirdPartyUserData.avatar_url;
      // currentUser.link = user.thirdPartyUserData.html_url;
      currentUser = {
          uid: user.uid,
          email: user.email,
          provider: user.providerData[0].providerId,
          displayName: user.displayName,
          picture: user.photoURL
        };

      if (onLogin) {
        // Normalize the pictures and links across services
        switch (onLogin.additionalUserInfo.providerId) {
          case "google.com":
            currentUser.link = '';
            currentUser.
            break;
          case "facebook.com":
            currentUser.link = '';
            break;
          case "twitter.com":
            currentUser.link = "http://twitter.com/" + onLogin.additionalUserInfo.screen_name;
            break;
          case "github.com":
            currentUser.link = onLogin.additionalUserInfo.profile.html_url;
            break;
          default:
            console.log("unknown user provider " + onLogin.additionalUserInfo.providerId);
        }
      }

      // User authenticated with Firebase
      // Store user data in Firebase so we can display it on the comments
      // fbUsers.child(currentUser.uid).set(currentUser);

      $("#fbc-login-buttons").hide();
      $("#fbc-comment-form").show();
    } else {
      // User is logged out
      currentUser = null;

      // show login buttons
      $("#fbc-login-buttons").show();
      $("#fbc-comment-form").hide();
    }
  });

  // Handle login
  $('#fbc-login-buttons button').click(function (event) {
    var provider = $(this).data("auth-provider");
    return signInUsing(provider);
  });

  // Handle logout
  $('#fbc-logout').click(function (event) {
    firebase.auth().logout();
  });

  // Handle insertions
  $('#fbc-comment-form-submit').click(function (event) {
    // Disable the button to prevent re-submissions
    $('#fbc-comment-form-submit').prop('disabled', true);
    // Get the comment
    var comment = $("#fbc-comment-message").val();
    // Empty the text area to prevent re-submissions
    $('#fbc-comment-message').val('');
    // re-enable the submit button
    $('#fbc-comment-form-submit').prop('disabled', false);

    fbPostComments.push({'uid': currentUser.uid, 'comment': comment}, function (error) {
      if (error != null) {
        alert(error.message + " Stop screwing around!")
      } else {
        // Comment was posted. Increment the comment count
        fbPostCommentCount.transaction(function (current_value) {
          return (current_value || 0) + 1;
        });
      }
    });
  });

  // Display existing and future comments
  fbPostComments.on('child_added', function (snapshot) {
    var message = snapshot.val();
    var messageComment = message.comment;

    fb.child("users/" + message.uid).once('value', function (userSnap) {
      var user = userSnap.val();

      // this is not working with an id reference to a template (possibly because it's 6 year old code), so give it the html instead
      var commentHtml = tmpl($('#fbc-comment-template').html(), {
        comment: scrubComment(messageComment),
        displayName: scrubComment(user.displayName),
        picture: scrubComment(user.picture),
        link: scrubComment(user.link)
      });

      $('#fbc-comments-list').append(commentHtml);
    })
  });

  fbPostCommentCount.on('value', function (snapshot) {
    $('#fbc-comment-count').text(snapshot.val());
  });

  // sign in
  function signInUsing(providerName) {
    const provider = getProviderByName(providerName);

    firebase.auth().signInWithPopup(provider).then(function(result) {
      // This gives you a GitHub Access Token. You can use it to access the GitHub API.
      var token = result.credential.accessToken;
      // The signed-in user info.
      onLogin = result.user;
      onLogin.additionalUserInfo = result.additionalUserInfo;
      // ...
    }).catch(function(error) {
      // Handle Errors here.
      var errorCode = error.code;
      var errorMessage = error.message;
      // The email of the user's account used.
      var email = error.email;
      // The firebase.auth.AuthCredential type that was used.
      var credential = error.credential;
      // ...
    });
  }

  function getProviderByName(providerName) {
    if (providerName === 'google') return googleProvider;
    if (providerName === 'facebook') return facebookProvider;
    if (providerName === 'twitter') return twitterProvider;
    if (providerName === 'github') return githubProvider;

    throw new Error('unknown provider: ' + providerName);
  }
});
</script>

<!-- <script>
  $(document).ready(function () {
    // Load up useful information from site and page variables
    var firebase = '{{site.fbc-comments-firebase}}';
    var postId = '{{page.id || default}}';
    var blogName = '{{site.name || default}}';

    // Sanitize the Firebase keys, since Jekyll allows more possible characters
    postId = sanitizeFirebaseKey(postId);

    var fb = new Firebase(firebase + blogName);
    var fbPostComments = fb.child('posts/' + postId);
    var fbPostCommentCount = fb.child('comment-counts/' + postId);

    var currentUser = null;

    // init Auth
    var auth = new FirebaseSimpleLogin(fb, function (error, user) {
      if (error) {
        // An error occurred while attempting login
        console.log(error);
      } else if (user) {
        // Expand the user object to include profile photo and url
        currentUser = {
          uid: user.uid,
          provider: user.provider,
          displayName: user.displayName
        };

        // Normalize the pictures and links across services
        switch (user.provider) {
          case 'google':
            currentUser.picture = user.thirdPartyUserData.picture;
            currentUser.link = user.thirdPartyUserData.link;
            break;
          case 'facebook':
            currentUser.picture = user.thirdPartyUserData.picture.data.url;
            currentUser.link = user.thirdPartyUserData.link;
            break;
          case 'twitter':
            currentUser.picture = user.thirdPartyUserData.profile_image_url;
            currentUser.link = "http://twitter.com/" + user.thirdPartyUserData.screen_name;
            break;
          case 'github':
            currentUser.picture = user.thirdPartyUserData.avatar_url;
            currentUser.link = user.thirdPartyUserData.html_url;
            break;
          default:
            console.log('unknown user provider ' + user.provider);
        }

        // User authenticated with Firebase
        // Store user data in Firebase so we can display it on the comments
        fb.child('users').child(currentUser.uid).set(currentUser);

        $('#fbc-login-buttons').hide();
        $('#fbc-comment-form').show();

      } else {
        // User is logged out
        currentUser = null;

        $('#fbc-login-buttons').show();
        $('#fbc-comment-form').hide();
      }
    });

    // Handle login
    $('#fbc-login-buttons button').click(function (event) {
      var provider = $(this).data('auth-provider');
      auth.login(provider, { rememberMe: true });
    });

    $('#fbc-logout').click(function (event) {
      auth.logout();
    });

    // Handle insertions
    $('#fbc-comment-form-submit').click(function (event) {
      // Disable the button to prevent re-submissions
      $('#fbc-comment-form-submit').prop('disabled', true);
      // Get the comment
      var comment = $("#fbc-comment-message").val();
      // Empty the text area to prevent re-submissions
      $('#fbc-comment-message').val('');
      // re-enable the submit button
      $('#fbc-comment-form-submit').prop('disabled', false);

      fbPostComments.push({'uid': currentUser.uid, 'comment': comment}, function (error) {
        if (error != null) {
          alert(error.message + ' Stop screwing around!')
        } else {
          // Comment was posted. Increment the comment count
          fbPostCommentCount.transaction(function (current_value) {
            return (current_value || 0) + 1;
          });
        }
      });
    });

    // Display existing and future comments
    fbPostComments.on('child_added', function (snapshot) {
      var message = snapshot.val();
      var messageComment = message.comment;

      fb.child("users/" + message.uid).once('value', function (userSnap) {
        var user = userSnap.val();

        // this is not working with an id reference to a template (possibly because it's 6 year old code), so give it the html instead
        var commentHtml = tmpl($('#fbc-comment-template').html(), {
          comment: scrubComment(messageComment),
          displayName: scrubComment(user.displayName),
          picture: scrubComment(user.picture),
          link: scrubComment(user.link)
        });

        $('#fbc-comments-list').append(commentHtml);
      })
    });
    fbPostCommentCount.on('value', function (snapshot) {
      $('#fbc-comment-count').text(snapshot.val());
    });
  });

  // Scrub user generated input before displaying
  function scrubComment(value){
    // prevent XSS
    var escaped = $('<div/>').text(value).html();
    //Replace newlines with line breaks
    return escaped.replace(/[\n\r]/g, '<br />');
  }

  function sanitizeFirebaseKey(key) {
    return key.replace(/[\.\/\$\[\]\x7F\x00-\x1F]/g, '-');
  }
</script> -->
<script type="application/vnd.fbc-template" id="fbc-comment-template">
  {% include firebase-comment-template.html %}
</script>
{% include firebase-comment-form-template.html %}
