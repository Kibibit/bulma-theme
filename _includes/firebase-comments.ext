
<script src="https://www.gstatic.com/firebasejs/5.0.3/firebase.js"></script>
<script>
  // Initialize Firebase
  var config = {
    apiKey: "{{ site.fb_apiKey }}",
    authDomain: "{{ site.fb_authDomain }}",
    databaseURL: "{{ site.fb_databaseURL }}",
    projectId: "{{ site.fb_projectId }}",
    storageBucket: "{{ site.fb_storageBucket }}",
    messagingSenderId: "{{ site.fb_messagingSenderId }}"
  };
  firebase.initializeApp(config);
</script>
<script>
const googleProvider = new firebase.auth.GoogleAuthProvider();
const facebookProvider = new firebase.auth.FacebookAuthProvider();
const twitterProvider = new firebase.auth.TwitterAuthProvider();
const githubProvider = new firebase.auth.GithubAuthProvider();

$(document).ready(function () {
  const postId = '{{ page.id || default }}';
  const blogName = '{{ site.name || default }}';
  const database = firebase.database();
  const fbPostComments = database.ref('posts/' + postId);
  const fbPostCommentCount = database.ref('comment-counts/' + postId);

  let currentUser = null;
  let onLogin = null;

  firebase.auth().onAuthStateChanged(function(user) {
    if (user) {
      // currentUser.picture = user.thirdPartyUserData.avatar_url;
      // currentUser.link = user.thirdPartyUserData.html_url;
      currentUser = {
          uid: user.uid,
          email: user.email,
          provider: user.providerData[0].providerId,
          displayName: user.displayName,
          picture: user.photoURL
        };

      if (onLogin) {
        // Normalize the pictures and links across services
        switch (onLogin.additionalUserInfo.providerId) {
          case "google.com":
            currentUser.link = '';
            currentUser.
            break;
          case "facebook.com":
            currentUser.link = '';
            break;
          case "twitter.com":
            currentUser.link = "http://twitter.com/" + onLogin.additionalUserInfo.screen_name;
            break;
          case "github.com":
            currentUser.link = onLogin.additionalUserInfo.profile.html_url;
            break;
          default:
            console.log("unknown user provider " + onLogin.additionalUserInfo.providerId);
        }

        // User authenticated with Firebase for the first time!
        // Store user data in Firebase so we can display it on the comments
        writeUserData(currentUser);
      }

      $("#fbc-login-buttons").hide();
      $("#fbc-comment-form").show();
    } else {
      // User is logged out
      currentUser = null;

      // show login buttons
      $("#fbc-login-buttons").show();
      $("#fbc-comment-form").hide();
    }
  });

  // Handle login
  $('#fbc-login-buttons .button').click(function (event) {
    var provider = $(this).data("auth-provider");
    return signInUsing(provider);
  });

  // Handle logout
  $('#fbc-logout').click(function (event) {
    firebase.auth().logout();
  });

  // Handle insertions
  $('#fbc-comment-form-submit').click(function (event) {
    // Disable the button to prevent re-submissions
    $('#fbc-comment-form-submit').prop('disabled', true);
    // Get the comment
    var comment = $("#fbc-comment-message").val();
    // Empty the text area to prevent re-submissions
    $('#fbc-comment-message').val('');
    // re-enable the submit button
    $('#fbc-comment-form-submit').prop('disabled', false);

    fbPostComments.push({'uid': currentUser.uid, 'comment': comment, timestamp: moment().format("YYYY-MM-DD[T]HH:mm:ss.SSS")}, function (error) {
      if (error != null) {
        alert(error.message + " Stop screwing around!")
      } else {
        // Comment was posted. Increment the comment count
        fbPostCommentCount.transaction(function (current_value) {
          return (current_value || 0) + 1;
        });
      }
    });
  });

  // Display existing and future comments
  fbPostComments.on('child_added', function (snapshot) {
    var message = snapshot.val();
    var messageComment = message.comment;
    var messageTimestamp = moment(message.timestamp).fromNow();

    database.ref('users/' + message.uid).once('value', function (userSnap) {
      var user = userSnap.val() || {};

      // this is not working with an id reference to a template (possibly because it's 6 year old code), so give it the html instead
      var commentHtml = `
      <article class="media">
        <figure class="media-left">
          <p class="image is-64x64">
            <img src="${ scrubComment(user.picture) }">
          </p>
        </figure>
        <div class="media-content">
          <div class="content">
            <p>
              <strong>${ scrubComment(user.displayName) }</strong> <!-- <small>@johnsmith</small> --><small>${ messageTimestamp }</small> 
              <br>
              ${ scrubComment(messageComment) }
            </p>
          </div>
        </div>
      </article>
      `;

      $('#fbc-comments-list').append(commentHtml);
    })
  });

  fbPostCommentCount.on('value', function (snapshot) {
    $('#fbc-comment-count').text(snapshot.val());
  });

  function writeUserData(user) {
    database.ref('users/' + user.uid).set(user);
  }

  // Scrub user generated input before displaying
  function scrubComment(value) {
    // prevent XSS
    var escaped = $('<div/>').text(value).html();
    //Replace newlines with line breaks
    return escaped.replace(/[\n\r]/g, "<br />");
  }

  // sign in
  function signInUsing(providerName) {
    const provider = getProviderByName(providerName);

    firebase.auth().signInWithPopup(provider).then(function(result) {
      // This gives you a GitHub Access Token. You can use it to access the GitHub API.
      var token = result.credential.accessToken;
      // The signed-in user info.
      onLogin = result.user;
      onLogin.additionalUserInfo = result.additionalUserInfo;
      // ...
    }).catch(function(error) {
      // Handle Errors here.
      var errorCode = error.code;
      var errorMessage = error.message;
      // The email of the user's account used.
      var email = error.email;
      // The firebase.auth.AuthCredential type that was used.
      var credential = error.credential;
      // ...
    });
  }

  function getProviderByName(providerName) {
    if (providerName === 'google') return googleProvider;
    if (providerName === 'facebook') return facebookProvider;
    if (providerName === 'twitter') return twitterProvider;
    if (providerName === 'github') return githubProvider;

    throw new Error('unknown provider: ' + providerName);
  }
});
</script>
{% include firebase-comment-form-template.html %}
